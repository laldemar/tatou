# --- RMAP (Roger Michael Authentication Protocol) setup ---
    # Paths can be overridden with env vars:
    #   RMAP_KEYS_DIR (default: server/keys)
    #   RMAP_SERVER_PRIV_PASSPHRASE (optional)
    rmap_keys_dir = Path(os.environ.get("RMAP_KEYS_DIR", "server/keys")).resolve()
    clients_dir = rmap_keys_dir / "clients"
    server_pub = rmap_keys_dir / "server_public.asc"
    server_priv = rmap_keys_dir / "server_private.asc"
    server_priv_pass = os.environ.get("RMAP_SERVER_PRIV_PASSPHRASE")  # may be None

    # Sanity check (fail fast with a readable error in logs):
    for p in [clients_dir, server_pub, server_priv]:
        if not p.exists():
            app.logger.error("RMAP key path missing: %s", p)

    try:
        im = IdentityManager(
            client_keys_dir=clients_dir,
            server_public_key_path=server_pub,
            server_private_key_path=server_priv,
            server_private_key_passphrase=server_priv_pass,
        )
        app.config["RMAP"] = RMAP(im)
        app.logger.info("RMAP initialized; clients in %s", clients_dir)
    except Exception as e:
        app.logger.exception("Failed to initialize RMAP: %s", e)
        app.config["RMAP"] = None
    
        # -------- RMAP endpoints --------
    @app.post("/api/rmap/message1")
    def rmap_message1():
        if app.config.get("RMAP") is None:
            return jsonify({"error": "RMAP not initialized"}), 503
        body = request.get_json(silent=True) or {}
        if "payload" not in body:
            return jsonify({"error": "payload is required"}), 400
        try:
            out = app.config["RMAP"].handle_message1(body)
            # out is either {"payload": "..."} or {"error": "..."}
            status = 200 if "payload" in out else 400
            return jsonify(out), status
        except Exception as e:
            return jsonify({"error": f"server error: {e}"}), 500

    @app.post("/api/rmap/message2")
    def rmap_message2():
        if app.config.get("RMAP") is None:
            return jsonify({"error": "RMAP not initialized"}), 503
        body = request.get_json(silent=True) or {}
        if "payload" not in body:
            return jsonify({"error": "payload is required"}), 400
        try:
            out = app.config["RMAP"].handle_message2(body)
            # out is either {"result": "<32-hex>"} or {"error": "..."}
            status = 200 if "result" in out else 400
            return jsonify(out), status
        except Exception as e:
            return jsonify({"error": f"server error: {e}"}), 500
