import io, json, time, pathlib, pytest
from hypothesis import given, settings, strategies as st
from payloads import pdf_bytes, safe_name, weird_str, positions

OUT = pathlib.Path(__file__).with_name("out")
OUT.mkdir(exist_ok=True)
REPORT = OUT / f"fuzz_report_{int(time.time())}.ndjson"

def record_issue(kind, req, resp):
    entry = {
        "kind": kind,
        "method": getattr(req, "method", "?"),
        "url": getattr(req, "url", "?"),
        "status": getattr(resp, "status_code", None),
        "body": resp.text[:800] if hasattr(resp, "text") else None,
    }
    REPORT.write_text((REPORT.read_text() if REPORT.exists() else "") + json.dumps(entry) + "\n")

def _upload(session, base_url, auth, name="doc", content=b"%PDF-1.4\n%%EOF\n"):
    files = {"file": ("f.pdf", io.BytesIO(content), "application/pdf")}
    data  = {"name": name}
    return session.post(f"{base_url}/api/upload-document", headers=auth, files=files, data=data)

def _pick_method(session, base_url):
    r = session.get(f"{base_url}/api/get-watermarking-methods")
    if r.ok:
        methods = [m["name"] for m in r.json().get("methods", [])]
        for m in ("toy-eof", "valdemar", "theo"):
            if m in methods:
                return m
        return methods[0] if methods else None
    return None

def test_healthz(session, base_url):
    r = session.get(f"{base_url}/healthz")
    assert r.status_code == 200
    assert "message" in r.json()

@given(name=safe_name, content=pdf_bytes())
@settings(max_examples=25)
def test_fuzz_upload_document(session, base_url, auth, name, content):
    r = _upload(session, base_url, auth, name=name, content=content)
    if r.status_code >= 500:
        record_issue("server-500-upload", r.request, r)
        pytest.xfail(f"Server 5xx on upload: {r.status_code}")
    assert r.status_code in (201, 400, 415, 422)

@given(secret=weird_str, key=weird_str, position=positions)
@settings(max_examples=15)
def test_fuzz_watermark_flow(session, base_url, auth, secret, key, position):
    up = _upload(session, base_url, auth,
                 name="ok",
                 content=b"%PDF-1.4\n1 0 obj\n<< /Type /Catalog >>\nendobj\n%%EOF\n")
    if up.status_code >= 500:
        record_issue("server-500-upload", up.request, up)
        pytest.xfail(f"Server 5xx on upload: {up.status_code}")
    if up.status_code != 201:
        return
    did = up.json()["id"]

    method = _pick_method(session, base_url)
    if not method:
        return

    payload = {"method": method, "position": position, "key": key, "secret": secret, "intended_for": "fuzz"}
    r = session.post(f"{base_url}/api/create-watermark/{did}", headers=auth, json=payload)
    if r.status_code >= 500:
        record_issue("server-500-create-wm", r.request, r)
        pytest.xfail(f"Server 5xx on create-watermark: {r.status_code}")
    assert r.status_code in (201, 400, 422)

# avoid the “” empty string path case that gives 405; still allow weird ids via query param
id_text_nonempty = st.text(min_size=1, max_size=10)

@given(doc_id=st.one_of(st.integers(min_value=-5, max_value=5), id_text_nonempty))
@settings(max_examples=25)
def test_fuzz_list_versions_and_delete(session, base_url, auth, doc_id):
    # Try via query param too, in case path would be invalid
    r1 = session.get(f"{base_url}/api/list-versions/{doc_id}", headers=auth)
    if r1.status_code >= 500:
        record_issue("server-500-list-versions", r1.request, r1)
        pytest.xfail(f"Server 5xx on list-versions: {r1.status_code}")
    assert r1.status_code in (200, 400, 404)

    r2 = session.delete(f"{base_url}/api/delete-document/{doc_id}", headers=auth)
    if r2.status_code == 405:
        # Route mismatch for weird id; try query param variant
        r2 = session.delete(f"{base_url}/api/delete-document", headers=auth, params={"id": str(doc_id)})
    if r2.status_code >= 500:
        record_issue("server-500-delete", r2.request, r2)
        pytest.xfail(f"Server 5xx on delete: {r2.status_code}")
    assert r2.status_code in (200, 400, 404, 405)




OLd upload-document:
    # POST /api/upload-document  (multipart/form-data)
    @app.post("/api/upload-document")
    @require_auth
    def upload_document():
        if "file" not in request.files:
            log_event("document-upload-missing-file", user=g.user["email"], status="FAIL")
            return jsonify({"error": "file is required (multipart/form-data)"}), 400
        file = request.files["file"]
        if not file or file.filename == "":
            log_event("document-upload-empty-filename", user=g.user["email"], status="FAIL")
            return jsonify({"error": "empty filename"}), 400

        fname = file.filename

        user_dir = app.config["STORAGE_DIR"] / "files" / g.user["login"]
        user_dir.mkdir(parents=True, exist_ok=True)

        ts = dt.datetime.utcnow().strftime("%Y%m%dT%H%M%S%fZ")
        final_name = request.form.get("name") or fname
        stored_name = f"{ts}__{fname}"
        stored_path = user_dir / stored_name
        file.save(stored_path)

        sha_hex = _sha256_file(stored_path)
        size = stored_path.stat().st_size

        try:
            with get_engine().begin() as conn:
                conn.execute(
                    text("""
                        INSERT INTO Documents (name, path, ownerid, sha256, size)
                        VALUES (:name, :path, :ownerid, UNHEX(:sha256hex), :size)
                    """),
                    {
                        "name": final_name,
                        "path": str(stored_path),
                        "ownerid": int(g.user["id"]),
                        "sha256hex": sha_hex,
                        "size": int(size),
                    },
                )
                did = int(conn.execute(text("SELECT LAST_INSERT_ID()")).scalar())
                row = conn.execute(
                    text("""
                        SELECT id, name, creation, HEX(sha256) AS sha256_hex, size
                        FROM Documents
                        WHERE id = :id
                    """),
                    {"id": did},
                ).one()
        except Exception as e:
            log_event("document-upload-db-error", user=g.user["email"], status="ERROR", details={"filename": fname})
            return jsonify({"error": f"database error: {str(e)}"}), 503
        
        log_event(
        "document-upload-success",
        user=g.user["email"],
        status="OK",
        details={"filename": fname, "sha256": sha_hex, "size": size}
        )

        return jsonify({
            "id": int(row.id),
            "name": row.name,
            "creation": row.creation.isoformat() if hasattr(row.creation, "isoformat") else str(row.creation),
            "sha256": row.sha256_hex,
            "size": int(row.size),
        }), 201